# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HarrisMatrix4QGIS
                                 A QGIS plugin
 Links a Harris Matrix in .graphml to Geometries
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-15
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Brigit Danthine
        email                : brigitte.danthine@oeaw.ac.at
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.gui import QgsMapLayerComboBox
from qgis.core import QgsMapLayerProxyModel
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .HarrisMatrix4QGIS_dockwidget import HarrisMatrix4QGISDockWidget
import os.path

#import for render_graph:
import networkx as nx 
import matplotlib.pyplot as plt
from xml.etree import ElementTree as ET
from qgis.core import QgsProject
from qgis.core import QgsProject, QgsMapLayer
from networkx.drawing.nx_pydot import graphviz_layout
import numpy as np
from qgis.core import QgsRuleBasedRenderer, QgsSymbol, QgsProperty, QgsSymbolLayer


class HarrisMatrix4QGIS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HarrisMatrix4QGIS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HarrisMatrix4QGIS')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'HarrisMatrix4QGIS')
        self.toolbar.setObjectName(u'HarrisMatrix4QGIS')

        #print "** INITIALIZING HarrisMatrix4QGIS"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HarrisMatrix4QGIS', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/HarrisMatrix4QGIS/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'HarrisMatrix4QGIS'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING HarrisMatrix4QGIS"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD HarrisMatrix4QGIS"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HarrisMatrix4QGIS'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def render_graph(self):
        def on_node_click(event, pos, labels):
            if event.inaxes is not None:
                x, y = event.xdata, event.ydata
                for node, node_pos in pos.items():
                    nx, ny = node_pos
                    #print("nx: ", nx, "ny: ", ny)
                    if (nx - x)**2 + (ny - y)**2 <= 200:  # 0.01 ist die Toleranz für den Klick
                        print("Knoten geklickt:", labels[node])
                        selected_node = labels[node]  # Den Namen des geklickten Knotens speichern
                        select_feature_by_node_name(selected_node)  # Funktion aufrufen, um die Geometrie auszuwählen
                        break
        
        def select_feature_by_node_name(node_name):
            layer = self.dockwidget.eingabelayer.currentLayer()
            layer.removeSelection()
            select_attribute = self.dockwidget.eingabefeld.currentField()
            exp = "\"{}\" = '{}'".format(select_attribute, node_name)
            layer.selectByExpression(exp)
            # Ändere die Symbolisierung auf "Rule Based"
            renderer = QgsRuleBasedRenderer(QgsSymbol.defaultSymbol(layer.geometryType()))
            root_rule = renderer.rootRule()
            
            # Regel für die Auswahl mit dem Wert 1
            selection_rule = QgsRuleBasedRenderer.Rule(symbol = QgsSymbol.defaultSymbol(layer.geometryType()))
            selection_rule.setFilterExpression(exp)
            selection_rule.setLabel("Selection")
                      
            root_rule.appendChild(selection_rule)
            #root_rule.appendChild(other_rule)
            
            layer.setRenderer(renderer)
            
            layer.triggerRepaint()
            return
        
        project = QgsProject.instance()
        su_layer = self.dockwidget.eingabelayer.currentLayer()
        
        graph_to_load = self.dockwidget.input_graphml.filePath()
        #print(graph_to_load)
        
        # Lese die GraphML-Datei ein
        tree = ET.parse(graph_to_load)
        root = tree.getroot()
        
        # Erstelle einen leeren Graphen
        G = nx.Graph()
        
        # Namespace-Präfixe für die Verwendung in XPath-Ausdrücken definieren
        namespaces = {'y': 'http://www.yworks.com/xml/graphml'}
        
        # Iteriere über alle Knoten im XML
        pos = {}
        for node in root.findall('.//graphml:node', {'graphml': 'http://graphml.graphdrawing.org/xmlns'}):
            node_id = node.attrib['id']
            label = None
            color = None
            
            
            # Extrahiere Label, Farbe und Position aus den XML-Tags
            for data in node.findall('.//y:NodeLabel', namespaces):
                label = data.text
            
            for data in node.findall('.//y:Fill', namespaces):
                color = data.attrib['color']
            
            for data in node.findall('.//y:Geometry', namespaces):
                pos_tuple = (int(float(data.attrib['x'])), int(float(data.attrib['y'])))
            pos[node_id] = pos_tuple
               
            # Füge den Knoten mit Label, Farbe und Position zum Graphen hinzu
            G.add_node(node_id, label=label, color=color, pos=pos)
        
        # Iteriere über alle Kanten im XML
        for edge in root.findall('.//graphml:edge', {'graphml': 'http://graphml.graphdrawing.org/xmlns'}):
            source_id = edge.attrib['source']
            target_id = edge.attrib['target']
            
            # Füge die Kante zum Graphen hinzu
            G.add_edge(source_id, target_id)
            
        
        # Zeichne den Graphen
        plt.figure(figsize=(10, 6))
        colors = nx.get_node_attributes(G, 'color').values()
        labels = nx.get_node_attributes(G, 'label')
        nx.draw(G, pos, with_labels=True, labels=labels, node_color=colors, node_size=600, font_size=5, font_color='black')
        pos_array = {node_id: np.array(coords) for node_id, coords in pos.items()}
        plt.gcf().canvas.mpl_connect('button_press_event', lambda event: on_node_click(event, pos_array, labels))
        plt.show()

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True
            #self.dlg = HarrisMatrix4QGISDockWidget()
            #print "** STARTING HarrisMatrix4QGIS"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = HarrisMatrix4QGISDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)
            
            self.dockwidget.eingabelayer.setFilters(QgsMapLayerProxyModel.VectorLayer)
            self.dockwidget.eingabelayer.layerChanged.connect(self.dockwidget.eingabefeld.setLayer)
            
            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
            
            self.dockwidget.start.clicked.connect(self.render_graph)

